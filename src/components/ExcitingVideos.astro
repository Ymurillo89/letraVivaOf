---
const videos = [
  {
    title: "Reacción Cumpleaños",
    desc: "La emoción de recibir una canción única",
    src: "/video/REGALOARAUL.mp4",
    poster: "/emotional-birthday-song-reaction.jpg",
  },
  {
    title: "Aniversario Especial",
    desc: "Amor en cada nota",
    src: "/video/REGALOARAUL.mp4",
    poster: "/romantic-anniversary-song-surprise.jpg",
  },
  {
    title: "Canción para la Abuelita",
    desc: "Ternura y emoción",
    src: "/video/REGALOARAUL.mp4",
    poster: "/mother-crying-happy-tears-song.jpg",
  },
  {
    title: "Para Mi Gordita",
    desc: "Una sorpresa romántica",
    src: "/video/REGALOARAUL.mp4",
    poster: "/romantic-surprise-song.jpg",
  }
];
---

<div class="rounded-3xl p-8 md:p-12 border-2 border-[#11676a]/20 shadow-xl relative overflow-hidden">
  <!-- Encabezado -->
  <div class="text-center mb-12">
    <div class="inline-flex items-center gap-2 bg-gradient-to-r from-[#11676a] to-[#2d8c89] text-white px-8 py-3 rounded-full text-base font-bold mb-4 shadow-2xl animate-pulse">
      <svg xmlns="http://www.w3.org/2000/svg" class="lucide lucide-play h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
        <polygon points="6 3 20 12 6 21 6 3"></polygon>
      </svg>
      <span>Videos Emocionantes</span>
    </div>
    <h3 class="text-4xl md:text-5xl font-bold text-gray-900 mb-4">Mira La Magia En Acción</h3>
    <p class="text-lg text-gray-600 max-w-2xl mx-auto">
      Descubre cómo nuestras canciones personalizadas crean momentos inolvidables
    </p>
  </div>

  <!-- Grid Desktop -->
  <div class="hidden md:grid md:grid-cols-4 gap-1 mb-8">
    {videos.map((video, index) => (
      <div
        class="video-container relative rounded-2xl overflow-hidden shadow-2xl group cursor-pointer border-2 border-[#11676a]/20 hover:border-[#11676a] transition-all hover:scale-[1.02]"
        style="aspect-ratio: 9 / 16;"
        data-video-src={video.src}
        data-index={index}
      >
        <!-- Poster como imagen de fondo -->
        <div 
          class="video-poster absolute inset-0 bg-cover bg-center"
          style={`background-image: url(${video.poster});`}
        >
          <div class="absolute inset-0 bg-black/20"></div>
        </div>

        <!-- Video (se carga bajo demanda) -->
        <video
          class="lazy-video w-full h-full object-cover opacity-0 transition-opacity duration-300"
          loop
          muted
          playsinline
          preload="none"
          poster={video.poster}
        >
          <source data-src={video.src} type="video/mp4" />
        </video>

        <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent flex items-end p-4 pointer-events-none z-10">
          <div class="text-white">
            <h4 class="text-lg font-bold mb-1">{video.title}</h4>
            <p class="text-xs opacity-90">{video.desc}</p>
          </div>
        </div>

        <!-- Botón de play inicial -->
        <div class="play-button absolute inset-0 flex items-center justify-center z-20 pointer-events-none transition-opacity duration-300">
          <div class="w-16 h-16 rounded-full bg-white/90 flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform">
            <svg xmlns="http://www.w3.org/2000/svg" class="lucide lucide-play h-8 w-8 text-[#11676a] ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <polygon points="6 3 20 12 6 21 6 3"></polygon>
            </svg>
          </div>
        </div>
      </div>
    ))}
  </div>

  <!-- Carrusel Mobile -->
  <div class="md:hidden overflow-x-auto snap-x snap-mandatory scrollbar-hide -mx-4 px-4">
    <div class="flex gap-1 pb-4">
      {videos.map((video, index) => (
        <div
          class="video-container flex-shrink-0 w-[70vw] snap-center relative rounded-2xl overflow-hidden shadow-2xl group cursor-pointer border-2 border-[#11676a]/20"
          style="aspect-ratio: 9 / 16;"
          data-video-src={video.src}
          data-index={index}
        >
          <!-- Poster como imagen de fondo -->
          <div 
            class="video-poster absolute inset-0 bg-cover bg-center"
            style={`background-image: url(${video.poster});`}
          >
            <div class="absolute inset-0 bg-black/20"></div>
          </div>

          <!-- Video (se carga bajo demanda) -->
          <video
            class="lazy-video w-full h-full object-cover opacity-0 transition-opacity duration-300"
            loop
            muted
            playsinline
            preload="none"
            poster={video.poster}
          >
            <source data-src={video.src} type="video/mp4" />
          </video>

          <div class="absolute inset-0 bg-gradient-to-t from-black/70 via-transparent to-transparent flex items-end p-6 pointer-events-none z-10">
            <div class="text-white">
              <h4 class="text-xl font-bold mb-2">{video.title}</h4>
              <p class="text-sm opacity-90">{video.desc}</p>
            </div>
          </div>

          <!-- Botón de play inicial -->
          <div class="play-button absolute inset-0 flex items-center justify-center z-20 pointer-events-none transition-opacity duration-300">
            <div class="w-16 h-16 rounded-full bg-white/90 flex items-center justify-center shadow-lg">
              <svg xmlns="http://www.w3.org/2000/svg" class="lucide lucide-play h-8 w-8 text-[#11676a] ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
                <polygon points="6 3 20 12 6 21 6 3"></polygon>
              </svg>
            </div>
          </div>
        </div>
      ))}
    </div>
  </div>
</div>

<script>
  const videoContainers = document.querySelectorAll('.video-container');
  const loadedVideos = new Set();

  // Intersection Observer para cargar videos cuando sean visibles
  const videoObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const container = entry.target;
        const index = container.dataset.index;
        
        // Solo cargar una vez
        if (!loadedVideos.has(index)) {
          loadedVideos.add(index);
          loadVideo(container);
        }
      }
    });
  }, {
    rootMargin: '100px',
    threshold: 0.1
  });

  // Observar todos los contenedores
  videoContainers.forEach(container => {
    videoObserver.observe(container);
  });

  // Función para cargar el video (mantiene poster visible)
  function loadVideo(container) {
    const video = container.querySelector('.lazy-video');
    const source = video.querySelector('source');
    
    if (source && source.dataset.src && !video.src) {
      // Solo cargar el video en memoria, NO mostrarlo ni reproducirlo
      source.src = source.dataset.src;
      video.load();
    }
  }

  // Click para reproducir/pausar (mejorado para móvil)
  videoContainers.forEach(container => {
    const playButton = container.querySelector('.play-button');
    const poster = container.querySelector('.video-poster');
    
    container.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      const video = container.querySelector('.lazy-video');
      const source = video.querySelector('source');
      
      if (!video.src) {
        // Si el video no está cargado, cargarlo primero
        if (source && source.dataset.src) {
          source.src = source.dataset.src;
          video.load();
          
          video.addEventListener('loadeddata', () => {
            // Ocultar poster
            if (poster) {
              poster.style.opacity = '0';
              setTimeout(() => poster.style.display = 'none', 300);
            }
            
            // Mostrar video
            video.style.opacity = '1';
            
            // Reproducir
            const playPromise = video.play();
            
            if (playPromise !== undefined) {
              playPromise.then(() => {
                // Reproducción exitosa
                if (playButton) {
                  playButton.style.opacity = '0';
                }
              }).catch(error => {
                console.log('Error al reproducir:', error);
                // En móvil, algunos navegadores requieren interacción adicional
              });
            }
          }, { once: true });
        }
      } else {
        // Si ya está cargado, reproducir/pausar
        if (video.paused) {
          // Ocultar poster si aún está visible
          if (poster && poster.style.display !== 'none') {
            poster.style.opacity = '0';
            setTimeout(() => poster.style.display = 'none', 300);
          }
          
          video.style.opacity = '1';
          
          const playPromise = video.play();
          
          if (playPromise !== undefined) {
            playPromise.then(() => {
              if (playButton) {
                playButton.style.opacity = '0';
              }
            }).catch(error => {
              console.log('Error al reproducir:', error);
            });
          }
        } else {
          video.pause();
          if (playButton) {
            playButton.style.opacity = '1';
          }
        }
      }
    });
    
    // Prevenir comportamiento por defecto en móvil
    container.addEventListener('touchstart', (e) => {
      e.stopPropagation();
    }, { passive: true });
  });

  // Pausar videos que no están visibles
  const pauseObserver = new IntersectionObserver((entries) => {
    entries.forEach(entry => {
      const video = entry.target.querySelector('.lazy-video');
      const playButton = entry.target.querySelector('.play-button');
      
      if (video && video.src) {
        if (!entry.isIntersecting && !video.paused) {
          video.pause();
          if (playButton) {
            playButton.style.opacity = '1';
          }
        }
      }
    });
  }, {
    threshold: 0.3
  });

  videoContainers.forEach(container => {
    pauseObserver.observe(container);
  });
</script>

<style>
  .scrollbar-hide::-webkit-scrollbar {
    display: none;
  }
  .scrollbar-hide {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .video-poster {
    transition: opacity 0.3s ease;
  }

  .play-button {
    transition: opacity 0.3s ease, transform 0.3s ease;
  }
</style>