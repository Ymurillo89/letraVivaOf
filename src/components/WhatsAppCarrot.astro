---
// Importar todas las imágenes
import image1 from "../img/sharedimage(2).jpeg";
import image2 from "../img/sharedimage(3).jpeg";
import image3 from "../img/sharedimage(4).jpeg";
import image4 from "../img/sharedimage(5).jpeg";
import image5 from "../img/sharedimage(6).jpeg";
import image6 from "../img/sharedimage(7).jpeg";
import image7 from "../img/sharedimage(8).jpeg";
import image8 from "../img/sharedimage(9).jpeg";
import image9 from "../img/sharedimage(10).jpeg";
import image10 from "../img/sharedimage(11).jpeg";
import image11 from "../img/sharedimage(12).jpeg";
import image12 from "../img/sharedimage(13).jpeg";
import image13 from "../img/sharedimage(14).jpeg";

// Array de imágenes
const images = [
    image1,
    image2,
    image3,
    image4,
    image5,
    image6,
    image7,
    image8,
    image9,
    image10,
    image11,
    image12,
    image13,
];
---

<div class="bg-gradient-to-br from-[#25D366]/5 via-white to-[#11676a]/5 rounded-3xl p-8 md:p-12 border-2 border-[#25D366]/20 shadow-xl relative overflow-hidden">
    <div class="absolute top-6 right-6 opacity-10">
        <svg 
            class="w-24 h-24 text-[#25D366]"
            fill="currentColor"
            viewBox="0 0 24 24"
            ><path
                d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"
            ></path></svg
        >
    </div>
    <div class="text-center mb-10 relative z-10">
        <div
            class="inline-flex items-center gap-2 bg-[#25D366] text-white px-6 py-2 rounded-full text-sm font-bold mb-6 shadow-lg"
        >
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24"
                ><path
                    d="M17.472 14.382c-.297-.149-1.758-.867-2.03-.967-.273-.099-.471-.148-.67.15-.197.297-.767.966-.94 1.164-.173.199-.347.223-.644.075-.297-.15-1.255-.463-2.39-1.475-.883-.788-1.48-1.761-1.653-2.059-.173-.297-.018-.458.13-.606.134-.133.298-.347.446-.52.149-.174.198-.298.298-.497.099-.198.05-.371-.025-.52-.075-.149-.669-1.612-.916-2.207-.242-.579-.487-.5-.669-.51-.173-.008-.371-.01-.57-.01-.198 0-.52.074-.792.372-.272.297-1.04 1.016-1.04 2.479 0 1.462 1.065 2.875 1.213 3.074.149.198 2.096 3.2 5.077 4.487.709.306 1.262.489 1.694.625.712.227 1.36.195 1.871.118.571-.085 1.758-.719 2.006-1.413.248-.694.248-1.289.173-1.413-.074-.124-.272-.198-.57-.347m-5.421 7.403h-.004a9.87 9.87 0 01-5.031-1.378l-.361-.214-3.741.982.998-3.648-.235-.374a9.86 9.86 0 01-1.51-5.26c.001-5.45 4.436-9.884 9.888-9.884 2.64 0 5.122 1.03 6.988 2.898a9.825 9.825 0 012.893 6.994c-.003 5.45-4.437 9.884-9.885 9.884m8.413-18.297A11.815 11.815 0 0012.05 0C5.495 0 .16 5.335.157 11.892c0 2.096.547 4.142 1.588 5.945L.057 24l6.305-1.654a11.882 11.882 0 005.683 1.448h.005c6.554 0 11.89-5.335 11.893-11.893a11.821 11.821 0 00-3.48-8.413Z"
                ></path></svg
            ><span>Testimonios Verificados</span>
        </div>
        <h3
            class="text-3xl md:text-5xl font-bold text-gray-900 mb-4 text-balance"
        >
            Lo Que Dicen Nuestros Clientes
        </h3>
        <p
            class="text-lg md:text-xl text-gray-600 text-pretty max-w-2xl mx-auto"
        >
            Conversaciones reales de clientes satisfechos con sus canciones
            personalizadas
        </p>
    </div>
    <div class="md:relative md:overflow-hidden md:rounded-3xl md:shadow-2xl bg-white/50 md:backdrop-blur-sm md:p-6 md:border-2 md:border-[#25D366]/30 relative">
        <div id="carousel-wrapper" class="carousel-wrapper">
            <!-- Primera copia del carrusel -->
            <div class="carousel-track">
                {
                    images.map((image, index) => (
                        <div class="carousel-item">
                            <img
                                src={image.src}
                                alt={`Imagen ${index + 1}`}
                                loading="lazy"
                            />
                        </div>
                    ))
                }
            </div>

            <!-- Segunda copia para el efecto infinito -->
            <div class="carousel-track" aria-hidden="true">
                {
                    images.map((image, index) => (
                        <div class="carousel-item">
                            <img
                                src={image.src}
                                alt={`Imagen ${index + 1}`}
                                loading="lazy"
                            />
                        </div>
                    ))
                }
            </div>
        </div>
        
        <!-- Indicador visual para mobile (opcional) -->
        <div id="play-indicator" class="play-indicator md:hidden">
            <svg class="w-6 h-6" fill="currentColor" viewBox="0 0 24 24">
                <path d="M8 5v14l11-7z"/>
            </svg>
        </div>
    </div>
    <div class="text-center mt-8">
        <div
            class="inline-flex items-center gap-2 bg-white px-6 py-3 rounded-full shadow-lg border-2 border-[#25D366]/20"
        >
            <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"
                class="lucide lucide-check h-5 w-5 text-[#25D366]"
                ><path d="M20 6 9 17l-5-5"></path></svg
            ><span class="text-sm font-bold text-gray-900"
                >Más de 500 conversaciones verificadas</span
            >
        </div>
    </div>
</div>


<style>
    .carousel-container {
        width: 100%;
        overflow: hidden;
        background: linear-gradient(to bottom, #f9fafb, #ffffff);
        padding: 3rem 0;
        position: relative;
    }

    .carousel-container::before,
    .carousel-container::after {
        content: "";
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100px;
        z-index: 2;
        pointer-events: none;
    }

    .carousel-container::before {
        left: 0;
        background: linear-gradient(to right, #f9fafb, transparent);
    }

    .carousel-container::after {
        right: 0;
        background: linear-gradient(to left, #f9fafb, transparent);
    }

    .carousel-wrapper {
        display: flex;
        width: fit-content;
        animation: scroll 70s linear infinite;
        position: relative;
    }

    .carousel-wrapper:hover {
        animation-play-state: paused;
    }

    .carousel-wrapper.paused {
        animation-play-state: paused;
    }

    .carousel-track {
        display: flex;
        gap: 2rem;
        padding: 0 1rem;
    }

    .carousel-item {
        flex-shrink: 0;
        width: 300px;
        height: 500px;
        border-radius: 1rem;
        overflow: hidden;
        box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
        transition:
            transform 0.3s ease,
            box-shadow 0.3s ease;
    }

    .carousel-item:hover {
        transform: translateY(-10px) scale(1.05);
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.15);
        cursor: pointer;
    }

    .carousel-item img {
        width: 100%;
        height: 100%;
        object-fit: contain;
        display: block;
    }

    /* Indicador de play/pause */
    .play-indicator {
        position: absolute;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background: rgba(37, 211, 102, 0.9);
        color: white;
        width: 60px;
        height: 60px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        opacity: 0;
        pointer-events: none;
        transition: opacity 0.3s ease;
        z-index: 10;
    }

    .play-indicator.show {
        opacity: 1;
    }

    .play-indicator.paused svg {
        transform: translateX(2px);
    }

    @keyframes scroll {
        0% {
            transform: translateX(0);
        }
        100% {
            transform: translateX(-50%);
        }
    }

    /* Responsive */
    @media (max-width: 768px) {
        .carousel-track {
            gap: 1rem;
        }

        .carousel-wrapper {
            animation-duration: 70s;
        }

        .carousel-item {
            cursor: pointer;
            user-select: none;
            -webkit-user-select: none;
            -webkit-tap-highlight-color: transparent;
        }
    }

    @media (max-width: 480px) {
        .carousel-item {
            width: 250px;
        }

        .carousel-container::before,
        .carousel-container::after {
            width: 50px;
        }
    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', () => {
        const carouselWrapper = document.getElementById('carousel-wrapper');
        const playIndicator = document.getElementById('play-indicator');
        let isPaused = false;
        let hideIndicatorTimeout: number | null = null;

        // Detectar si es dispositivo móvil
        const isMobile = () => window.matchMedia('(max-width: 768px)').matches;

        // Función para mostrar el indicador temporalmente
        const showIndicator = (paused: boolean) => {
            if (!playIndicator || !isMobile()) return;

            // Actualizar el ícono según el estado
            const icon = paused 
                ? '<path d="M6 4h4v16H6V4zm8 0h4v16h-4V4z"/>' // Pause icon
                : '<path d="M8 5v14l11-7z"/>'; // Play icon
            
            const svg = playIndicator.querySelector('svg');
            if (svg) {
                svg.innerHTML = icon;
            }

            playIndicator.classList.add('show');

            // Limpiar timeout anterior si existe
            if (hideIndicatorTimeout !== null) {
                clearTimeout(hideIndicatorTimeout);
            }

            // Ocultar después de 1 segundo
            hideIndicatorTimeout = window.setTimeout(() => {
                playIndicator.classList.remove('show');
            }, 1000);
        };

        // Toggle de pausa/reproducción
        const togglePlayPause = () => {
            if (!carouselWrapper || !isMobile()) return;

            isPaused = !isPaused;
            
            if (isPaused) {
                carouselWrapper.classList.add('paused');
                showIndicator(true);
            } else {
                carouselWrapper.classList.remove('paused');
                showIndicator(false);
            }
        };

        // Event listeners para mobile
        if (carouselWrapper && isMobile()) {
            // Touch event
            carouselWrapper.addEventListener('touchstart', (e) => {
                // Prevenir comportamiento por defecto solo si es un tap, no un scroll
                const touch = e.touches[0];
                const startX = touch.clientX;
                const startY = touch.clientY;
                
                const handleTouchEnd = (endEvent: TouchEvent) => {
                    const endTouch = endEvent.changedTouches[0];
                    const deltaX = Math.abs(endTouch.clientX - startX);
                    const deltaY = Math.abs(endTouch.clientY - startY);
                    
                    // Si el movimiento es mínimo, considerar como tap
                    if (deltaX < 10 && deltaY < 10) {
                        togglePlayPause();
                    }
                    
                    carouselWrapper.removeEventListener('touchend', handleTouchEnd);
                };
                
                carouselWrapper.addEventListener('touchend', handleTouchEnd);
            });

            // Click event como respaldo
            carouselWrapper.addEventListener('click', (e) => {
                // Solo activar en mobile
                if (isMobile()) {
                    e.preventDefault();
                    togglePlayPause();
                }
            });
        }

        // Reiniciar estado cuando cambie el tamaño de pantalla
        window.addEventListener('resize', () => {
            if (!isMobile() && isPaused && carouselWrapper) {
                isPaused = false;
                carouselWrapper.classList.remove('paused');
                if (playIndicator) {
                    playIndicator.classList.remove('show');
                }
            }
        });
    });
</script>